import datetime
import sys
from pprint import pprint
from time import sleep

import ccxt
import telebot
from django.core.management.base import BaseCommand
from telebot import types
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from Bot.management.commands.config import token, width, bot_name, vip_cost, pay_adres, network, cashback, \
    pay_adres_1, network_1
from Bot.models import Users


bot = telebot.TeleBot(token)

bot.delete_webhook()
admin_chat_id = 6291876932


def add_balance(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    language = Users.objects.get(user_id=user_id).language
    # user_name = message.from_user.username
    link = int(message.text)
    if link > 100:
        link = 100
    if link < 1:
        link = 1
    Users.objects.filter(user_id=user_id).update(
        percent_balance=int(link)
    )
    msg = f''

    if language == 'ru':
        msg = f'–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ'
    elif language == 'en':
        msg = f'Percentage of balance successfully changed'

    bot.send_message(chat_id, msg, parse_mode='html')


def add_leverage(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    language = Users.objects.get(user_id=user_id).language
    # user_name = message.from_user.username
    link = str(message.text)
    Users.objects.filter(user_id=user_id).update(
        leverage=int(link)
    )
    msg = f'–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ'

    if language == 'ru':
        msg = f'–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ'
    elif language == 'en':
        msg = f'Leverage has been successfully changed'

    bot.send_message(chat_id, msg, parse_mode='html')


def add_binance_api(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    language = Users.objects.get(user_id=user_id).language
    # user_name = message.from_user.username
    link = str(message.text).split(',')
    api_key = str(link[0]).replace(' ', '')
    api_secret = str(link[1]).replace(' ', '')
    session = ccxt.binance(
        {
            "apiKey": api_key,
            "secret": api_secret,
        }
    )
    msg = ''

    try:
        session.fetch_balance()
        if language == 'ru':
            msg = f'–ë–∏—Ä–∂–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'
        elif language == 'en':
            msg = f'Exchange successfully connected'
        Users.objects.filter(user_id=user_id).update(
            api_key=api_key,
            api_secret=api_secret,
            exchange='Binance'
        )
    except:
        if language == 'ru':
            msg = f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∞–ø–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
        elif language == 'en':
            msg = f'Something went wrong check your api and try again'

    bot.send_message(chat_id, msg, parse_mode='html', reply_markup=gen_markup())


def add_bybit_api(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    language = Users.objects.get(user_id=user_id).language
    # user_name = message.from_user.username
    link = str(message.text).split(',')
    api_key = str(link[0]).replace(' ', '')
    api_secret = str(link[1]).replace(' ', '')
    session = ccxt.bybit(
        {
            "apiKey": api_key,
            "secret": api_secret,
            "enableRateLimit": True,
            'timeout': 30000,
        }
    )
    msg = ''

    try:
        session.fetch_balance()
        if language == 'ru':
            msg = f'–ë–∏—Ä–∂–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'
        elif language == 'en':
            msg = f'Exchange successfully connected'
        Users.objects.filter(user_id=user_id).update(
            api_key=api_key,
            api_secret=api_secret,
            exchange='Bybit'
        )
    except:
        if language == 'ru':
            msg = f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∞–ø–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
        elif language == 'en':
            msg = f'Something went wrong check your api and try again'

    bot.send_message(chat_id, msg, parse_mode='html', reply_markup=gen_markup())


# def remove_trader(message):
#     user_id = message.from_user.id
#     chat_id = message.chat.id
#     # user_name = message.from_user.username
#     link = str(message.text)
#     user = Users.objects.get(user_id=user_id)
#     while True:
#         sleep(2)
#         pos_response = requests.post(info_url, headers=pos_headers,
#                                      json={"encryptedUid": link.split('encryptedUid=')[1]},
#                                      timeout=2)
#         if pos_response.ok:
#             break
#
#     data = json.loads(pos_response.content)['data']
#
#     trader = Traders.objects.get(
#         name=data['nickName'],
#         link=link
#     )
#
#     follow = UserFollowing.objects.get(
#         trader_f=trader,
#         user_f=user
#     )
#     follow.delete()
#     Users.objects.filter(user_id=user_id).update(traders_count=user.traders_count - 1)
#     bot.send_message(chat_id=chat_id, text='Trader remove Successful', reply_markup=gen_markup())


# def add_trader(message):
#     user_id = message.from_user.id
#     chat_id = message.chat.id
#     link = str(message.text)
#     user = Users.objects.get(user_id=user_id)
#     subscription_type = user.subscription_type
#     traders_count = user.traders_count
#
#     def get_subscription_info():
#         if subscription_type == 'VIP':
#             return 'VIP', 10, '10', '10'
#         elif subscription_type == 'Standard':
#             return 'Standard', 5, '5', '5'
#         elif subscription_type == 'Basic':
#             return 'Ordinary', 2, '2', '2'
#         else:
#             return 'Free', 0, 'none', '0'
#
#     subscription_name, max_traders_count, count_word, count_digit = get_subscription_info()
#
#     if subscription_type == 'Free':
#         language = user.language
#         if language == 'ru':
#             msg = f'–í–∞–º –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ —Å –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π!\n' \
#                   f'–î–ª—è —ç—Ç–æ–≥–æ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ—Ä–≥–æ–≤–ª—é —Ç—Ä–µ–π–¥–µ—Ä–æ–≤'
#         else:
#             msg = f'You are not allowed to add traders with Free Subscription!\n' \
#                   f'To do this, update your subscription and copy traders trades'
#
#         bot.send_message(chat_id=chat_id, text=msg, reply_markup=gen_markup())
#         return
#
#     if traders_count >= max_traders_count:
#         language = user.language
#         if language == 'ru':
#             msg = f'–£ –≤–∞—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ ({count_word} —à—Ç—É–∫)!!\n' \
#                   f'–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞, —É–¥–∞–ª–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö'
#         else:
#             msg = f'You have reached the limit on copying traders at the same time ({count_word} {count_digit})!!!\n' \
#                   f'To add a new trader, remove one of the existing ones'
#         bot.send_message(chat_id=chat_id, text=msg, reply_markup=gen_markup())
#         return
#     else:
#         while True:
#             sleep(2)
#             pos_response = requests.post(info_url, headers=pos_headers,
#                                          json={"encryptedUid": link.split('encryptedUid=')[1]},
#                                          timeout=2)
#             if pos_response.ok:
#                 break
#         data = json.loads(pos_response.content)['data']
#
#         try:
#             trader = Traders.objects.get(
#                 name=data['nickName'],
#                 link=link
#             )
#         except Traders.DoesNotExist:
#             trader = Traders(
#                 name=data['nickName'],
#                 link=link
#             )
#             trader.save()
#
#         follow = UserFollowing(
#             trader_f=trader,
#             user_f=user
#         )
#         follow.save()
#
#         Users.objects.filter(user_id=user_id).update(traders_count=traders_count + 1)
#         language = user.language
#         if language == 'ru':
#             msg = f'–¢—Ä–µ–π–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n' \
#                   f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ {traders_count - 1} —Ç—Ä–µ–π–¥–µ—Ä–æ–≤'
#         else:
#             msg = f'Trader successfully added!\n' \
#                   f'You can add more {traders_count - 1} traders'
#         bot.send_message(chat_id=chat_id, text=msg, reply_markup=gen_markup())


def gen_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = width
    markup.add(InlineKeyboardButton("‚öôÔ∏èTrade Settings", callback_data="Settings"),
               # InlineKeyboardButton("üôçTraders", callback_data="Traders"),
               InlineKeyboardButton("üí∞Subscription", callback_data="Subscription"),
               InlineKeyboardButton("üá¨üáßLanguage", callback_data="Language"),
               InlineKeyboardButton("üë•Referral URL", callback_data="Referral"),
               )

    return markup


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data == 'Settings':
        user = Users.objects.get(user_id=call.message.chat.id)
        language = user.language
        exchange = user.exchange
        # api_key = user.api_key
        # api_secret = user.api_secret
        leverage = user.leverage
        balance = user.percent_balance

        msg = ''
        if language == 'ru':
            if exchange == 'Not_connect':
                msg = f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n' \
                      f'–ë–∏—Ä–∂–∞: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!!!\n' \
                      f'–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–µ: {leverage}\n' \
                      f'–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞: {balance}'
            else:
                msg = f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n' \
                      f'–ë–∏—Ä–∂–∞: {exchange}\n' \
                      f'–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–µ: {leverage}\n' \
                      f'–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞: {balance}'
        elif language == 'en':
            if exchange == 'Not_connect':
                msg = f'Select a setting to change:\n\n' \
                      f'Exchange: Not connected!!!\n' \
                      f'Leverage: {leverage}\n' \
                      f'Percentage of balance: {balance}'
            else:
                msg = f'Select a setting to change:\n\n' \
                      f'Exchange: {exchange}\n' \
                      f'Leverage: {leverage}\n' \
                      f'Percentage of balance: {balance}'

        reply_markup = types.InlineKeyboardMarkup()
        reply_markup.row_width = 3
        reply_markup.add(
            types.InlineKeyboardButton("üè¶Exchange", callback_data='Exchange'),
            types.InlineKeyboardButton("üî¢Leverage", callback_data='Leverage'),
            types.InlineKeyboardButton("üí≥Balance", callback_data='Balance'),
            types.InlineKeyboardButton("üîôBack", callback_data='Back')
        )

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
                              reply_markup=reply_markup, parse_mode='html')
        # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # if call.data == 'Traders':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞:'
    #     elif language == 'en':
    #         msg = f'Select the trader settings:'
    #
    #     reply_markup = types.InlineKeyboardMarkup()
    #     reply_markup.row_width = 3
    #     reply_markup.add(
    #         types.InlineKeyboardButton("üëÄMy Trader", callback_data='View'),
    #         types.InlineKeyboardButton("‚ûïSubscribe", callback_data='Subscribe'),
    #         types.InlineKeyboardButton("‚ûñUnsubscribe", callback_data='Unsubscribe'),
    #         types.InlineKeyboardButton("üîôBack", callback_data='Back')
    #     )
    #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
    #                           reply_markup=reply_markup, parse_mode='html')
    #     # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    if call.data == 'Subscription':
        language = Users.objects.get(user_id=call.message.chat.id).language
        user = Users.objects.get(user_id=call.message.chat.id)
        msg = ''
        if language == 'ru':
            if user.subs_active:
                msg = f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {user.subs_date_end}:'
            else:
                msg = f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞!! –û–±–Ω–æ–≤–∏—Ç–µ –µ—ë —Å–∫–æ—Ä–µ–µ!!:'

        elif language == 'en':
            if user.subs_active:
                msg = f'Your is active until {user.subs_date_end}:'
            else:
                msg = f'Your subscription  is not active!!! Update it soon!!!:'

        reply_markup = types.InlineKeyboardMarkup()
        reply_markup.row_width = 1
        reply_markup.add(
            # types.InlineKeyboardButton("ü•âBasic", callback_data='Ordinary'),
            types.InlineKeyboardButton("ü•áBuy Subscription", callback_data='VIP'),
            # types.InlineKeyboardButton("ü•àStandard", callback_data='Standard'),
            types.InlineKeyboardButton("üîôBack", callback_data='Back')
        )
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
                              reply_markup=reply_markup, parse_mode='html')
        # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    if call.data == 'Language':
        language = Users.objects.get(user_id=call.message.chat.id).language
        msg = ''
        if language == 'ru':
            msg = f'–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:'
        elif language == 'en':
            msg = f'Select the application language:'

        reply_markup = types.InlineKeyboardMarkup()
        reply_markup.row_width = width
        reply_markup.add(
            types.InlineKeyboardButton("EN", callback_data='EN'),
            types.InlineKeyboardButton("RU", callback_data='RU'),
            types.InlineKeyboardButton("üîôBack", callback_data='Back')
        )
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
                              reply_markup=reply_markup, parse_mode='html')
        # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    if call.data == 'Referral':
        language = Users.objects.get(user_id=call.message.chat.id).language
        user = Users.objects.get(user_id=call.message.chat.id)
        balance = user.balance
        msg = ''
        count_ref = len(Users.objects.filter(referral=user))

        link = f'https://t.me/{bot_name}?start={call.message.chat.id}'
        if language == 'ru':
            msg = f'–£ –≤–∞—Å {count_ref} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n' \
                  f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ {link}\n\n' \
                  f'–ó–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {cashback} USD –∫—ç—à–±–µ–∫ –æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏!\n' \
                  f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} USDT'

        elif language == 'en':
            msg = f'You have {count_ref} referrals\n\n' \
                  f'Your referral link {link}\n\n' \
                  f'For each active referral you get {cashback} USD cashback on subscription fees!\n' \
                  f'Your Balance: {balance} USDT'

        reply_markup = types.InlineKeyboardMarkup()
        reply_markup.row_width = width
        reply_markup.add(
            types.InlineKeyboardButton("üîôBack", callback_data='Back')
        )
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
                              reply_markup=reply_markup, parse_mode='html')
    # second call part
    # –ú–µ–Ω—è–µ–º —è–∑—ã–∫
    if call.data == 'EN':
        Users.objects.filter(user_id=call.message.chat.id).update(language='en')
        language = Users.objects.get(user_id=call.message.chat.id).language
        msg = ''
        if language == 'ru':
            msg = f'–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω:'
        elif language == 'en':
            msg = f'The language has been successfully changed:'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
                              reply_markup=gen_markup(), parse_mode='html')
        # bot.send_message(call.message.chat.id, msg, reply_markup=gen_markup(), parse_mode='html')
    if call.data == 'RU':
        Users.objects.filter(user_id=call.message.chat.id).update(language='ru')
        language = Users.objects.get(user_id=call.message.chat.id).language
        msg = ''
        if language == 'ru':
            msg = f'–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω:'
        elif language == 'en':
            msg = f'The language has been successfully changed:'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
                              reply_markup=gen_markup(), parse_mode='html')
        # bot.send_message(call.message.chat.id, msg, reply_markup=gen_markup(), parse_mode='html')
    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –∏ —Å—Ç—Ä–æ–∫–∞
    if call.data == 'VIP':
        language = Users.objects.get(user_id=call.message.chat.id).language
        # user = Users.objects.get(user_id=call.message.chat.id)
        msg = ''
        if language == 'ru':
            msg = f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–µ—Å—è—Ü {vip_cost} USDT\n\n'
        elif language == 'en':
            msg = f'The cost of the subscription per month is {vip_cost} USDT\n\n'

        reply_markup = types.InlineKeyboardMarkup()
        reply_markup.row_width = 3
        reply_markup.add(
            types.InlineKeyboardButton("üìÖ1 month", callback_data='1vip'),
            # types.InlineKeyboardButton("üìÖ3 month", callback_data='3vip'),
            # types.InlineKeyboardButton("üìÖ7 month", callback_data='7vip'),
            types.InlineKeyboardButton("üîôBack", callback_data='Back')
        )
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
                              reply_markup=reply_markup, parse_mode='html')
        # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # if call.data == 'Ordinary':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     # user = Users.objects.get(user_id=call.message.chat.id)
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ Basic –≤ –º–µ—Å—è—Ü {ordinary_cost} USDT\n\n' \
    #               f'–ï—ë –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ:\n' \
    #               f'- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ 2 —Ç—Ä–µ–π–¥–µ—Ä–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n' \
    #               f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:'
    #     elif language == 'en':
    #         msg = f'The cost of the Basic subscription per month is {ordinary_cost} USDT\n\n' \
    #               f'Its advantage:\n\n' \
    #               f'- Ability to follow 2 traders at a time\n'
    #
    #     reply_markup = types.InlineKeyboardMarkup()
    #     reply_markup.row_width = 3
    #     reply_markup.add(
    #         types.InlineKeyboardButton("üìÖ1 month", callback_data='1ord'),
    #         types.InlineKeyboardButton("üìÖ3 month", callback_data='3ord'),
    #         types.InlineKeyboardButton("üìÖ7 month", callback_data='7ord'),
    #         types.InlineKeyboardButton("üîôBack", callback_data='Back')
    #     )
    #
    #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
    #                           reply_markup=reply_markup, parse_mode='html')
    #     # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # if call.data == 'Standard':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     # user = Users.objects.get(user_id=call.message.chat.id)
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ Standard –≤ –º–µ—Å—è—Ü {standard_cost} USDT\n\n' \
    #               f'–ï—ë –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ:\n' \
    #               f'- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ 5 —Ç—Ä–µ–π–¥–µ—Ä–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n' \
    #               f'- –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è\n' \
    #               f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:'
    #     elif language == 'en':
    #         msg = f'The cost of the Standard subscription per month is {standard_cost} USDT\n\n' \
    #               f'Its advantage:\n\n' \
    #               f'- Ability to follow 5 traders at a time\n'
    #
    #     reply_markup = types.InlineKeyboardMarkup()
    #     reply_markup.row_width = 3
    #     reply_markup.add(
    #         types.InlineKeyboardButton("üìÖ1 month", callback_data='1st'),
    #         types.InlineKeyboardButton("üìÖ3 month", callback_data='3st'),
    #         types.InlineKeyboardButton("üìÖ7 month", callback_data='7st'),
    #         types.InlineKeyboardButton("üîôBack", callback_data='Back')
    #     )
    #
    #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
    #                           reply_markup=reply_markup, parse_mode='html')
    #     # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    # –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤–∏–ø
    if call.data == '1vip':
        language = Users.objects.get(user_id=call.message.chat.id).language
        user = Users.objects.get(user_id=call.message.chat.id)
        # count_ref = len(Users.objects.filter(referral=user, subs_active=True))
        # subs_discount = count_ref * discount
        # if subs_discount > 15:
        #     subs_discount = 15
        subs_cost = vip_cost  # (vip_cost - (subs_discount * vip_cost / 100)) * 1
        msg = ''
        if language == 'ru':
            msg = f'–ö –æ–ø–ª–∞—Ç–µ {subs_cost} USDT or BUSD:\n' \
                  f'–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å <code>{pay_adres}</code>\n' \
                  f'–°–ï–¢–¨: {network}\n' \
                  f'–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å <code>{pay_adres_1}</code>\n' \
                  f'–°–ï–¢–¨: {network_1}\n' \
                  f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã'
        elif language == 'en':
            msg = f'Price {subs_cost} USDT or BUSD:\n' \
                  f'Pay to this address <code>{pay_adres}</code>\n' \
                  f'Network: {network}\n' \
                  f'Pay to this address <code>{pay_adres_1}</code>\n' \
                  f'Network: {network_1}\n' \
                  f'After payment, send a screenshot here to confirm payment'

        # invoice = Crypto.createInvoice("USDT", f'{subs_cost}', params={"description": "1vip",
        #                                                                "expires_in": 300,
        #                                                                })
        # invoice_id = invoice['result']['invoice_id']

        inline_keyboard = [
            [
                # types.InlineKeyboardButton("Check Pay", callback_data='check'),
                # types.InlineKeyboardButton("Pay", url=invoice['result']['pay_url']),
                types.InlineKeyboardButton("Back", callback_data='Back')

            ]
        ]

        reply_markup = types.InlineKeyboardMarkup(inline_keyboard)
        reply_markup.row_width = width

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
                              reply_markup=reply_markup, parse_mode='html')
        # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # if call.data == '3vip':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     user = Users.objects.get(user_id=call.message.chat.id)
    #     # count_ref = len(Users.objects.filter(referral=user, subs_active=True))
    #     # subs_discount = count_ref * discount
    #     # if subs_discount > 15:
    #     #     subs_discount = 15
    #     subs_cost = vip_cost * 3  # (vip_cost - (subs_discount * vip_cost / 100)) * 3
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–ö –æ–ø–ª–∞—Ç–µ {subs_cost} USDT:\n' \
    #               f'–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å <code>{pay_adres}</code>\n' \
    #               f'–°–ï–¢–¨: {network}\n' \
    #               f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã'
    #     elif language == 'en':
    #         msg = f'Price {subs_cost} USDT:\n' \
    #               f'Pay to this address <code>{pay_adres}</code>\n' \
    #               f'Network: {network}\n' \
    #               f'After payment, send a screenshot here to confirm payment'
    #
    #     # invoice = Crypto.createInvoice("USDT", f'{subs_cost}', params={"description": "3vip",
    #     #                                                                "expires_in": 300,
    #     #                                                                })
    #     # invoice_id = invoice['result']['invoice_id']
    #
    #     inline_keyboard = [
    #         [
    #             # types.InlineKeyboardButton("Check Pay", callback_data=invoice_id),
    #             # types.InlineKeyboardButton("Pay", url=invoice['result']['pay_url']),
    #             types.InlineKeyboardButton("Back", callback_data='Back')
    #
    #         ]
    #     ]
    #
    #     reply_markup = types.InlineKeyboardMarkup(inline_keyboard)
    #     reply_markup.row_width = width
    #
    #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
    #                           reply_markup=reply_markup, parse_mode='html')
    #     # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # if call.data == '7vip':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     user = Users.objects.get(user_id=call.message.chat.id)
    #     # count_ref = len(Users.objects.filter(referral=user, subs_active=True))
    #     # subs_discount = count_ref * discount
    #     # if subs_discount > 15:
    #     #     subs_discount = 15
    #     subs_cost = vip_cost * 7  # (vip_cost - (subs_discount * vip_cost / 100)) * 7
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–ö –æ–ø–ª–∞—Ç–µ {subs_cost} USDT:\n' \
    #               f'–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å <code>{pay_adres}</code>\n' \
    #               f'–°–ï–¢–¨: {network}\n' \
    #               f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã'
    #     elif language == 'en':
    #         msg = f'Price {subs_cost} USDT:\n' \
    #               f'Pay to this address <code>{pay_adres}</code>\n' \
    #               f'Network: {network}\n' \
    #               f'After payment, send a screenshot here to confirm payment'
    #
    #     # invoice = Crypto.createInvoice("USDT", f'{subs_cost}', params={"description": "7vip",
    #     #                                                                "expires_in": 300,
    #     #                                                                })
    #     # invoice_id = invoice['result']['invoice_id']
    #
    #     inline_keyboard = [
    #         [
    #             # types.InlineKeyboardButton("Check Pay", callback_data=invoice_id),
    #             # types.InlineKeyboardButton("Pay", url=invoice['result']['pay_url']),
    #             types.InlineKeyboardButton("Back", callback_data='Back')
    #
    #         ]
    #     ]
    #
    #     reply_markup = types.InlineKeyboardMarkup(inline_keyboard)
    #     reply_markup.row_width = width
    #
    #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
    #                           reply_markup=reply_markup, parse_mode='html')
    #     # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # # –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫ Ordinary
    # if call.data == '1ord':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     user = Users.objects.get(user_id=call.message.chat.id)
    #     count_ref = len(Users.objects.filter(referral=user, subs_active=True))
    #     subs_discount = count_ref * discount
    #     if subs_discount > 15:
    #         subs_discount = 15
    #     subs_cost = (ordinary_cost - (subs_discount * ordinary_cost / 100)) * 1
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–ö –æ–ø–ª–∞—Ç–µ {subs_cost} USDT:'
    #     elif language == 'en':
    #         msg = f'Price {subs_cost} USDT:'
    #
    #     invoice = Crypto.createInvoice("USDT", f'{subs_cost}', params={"description": "1ord",
    #                                                                    "expires_in": 300,
    #                                                                    })
    #     invoice_id = invoice['result']['invoice_id']
    #
    #     inline_keyboard = [
    #         [
    #             types.InlineKeyboardButton("Check Pay", callback_data=invoice_id),
    #             types.InlineKeyboardButton("Pay", url=invoice['result']['pay_url']),
    #             types.InlineKeyboardButton("Back", callback_data='Back')
    #
    #         ]
    #     ]
    #
    #     reply_markup = types.InlineKeyboardMarkup(inline_keyboard)
    #     reply_markup.row_width = width
    #
    #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
    #                           reply_markup=reply_markup, parse_mode='html')
    #     # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # if call.data == '3ord':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     user = Users.objects.get(user_id=call.message.chat.id)
    #     count_ref = len(Users.objects.filter(referral=user, subs_active=True))
    #     subs_discount = count_ref * discount
    #     if subs_discount > 15:
    #         subs_discount = 15
    #     subs_cost = (ordinary_cost - (subs_discount * ordinary_cost / 100)) * 3
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–ö –æ–ø–ª–∞—Ç–µ {subs_cost} USDT:'
    #     elif language == 'en':
    #         msg = f'Price {subs_cost} USDT:'
    #
    #     invoice = Crypto.createInvoice("USDT", f'{subs_cost}', params={"description": "3ord",
    #                                                                    "expires_in": 300,
    #                                                                    })
    #     invoice_id = invoice['result']['invoice_id']
    #
    #     inline_keyboard = [
    #         [
    #             types.InlineKeyboardButton("Check Pay", callback_data=invoice_id),
    #             types.InlineKeyboardButton("Pay", url=invoice['result']['pay_url']),
    #             types.InlineKeyboardButton("Back", callback_data='Back')
    #
    #         ]
    #     ]
    #
    #     reply_markup = types.InlineKeyboardMarkup(inline_keyboard)
    #     reply_markup.row_width = width
    #
    #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
    #                           reply_markup=reply_markup, parse_mode='html')
    #     # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # if call.data == '7ord':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     user = Users.objects.get(user_id=call.message.chat.id)
    #     count_ref = len(Users.objects.filter(referral=user, subs_active=True))
    #     subs_discount = count_ref * discount
    #     if subs_discount > 15:
    #         subs_discount = 15
    #     subs_cost = (ordinary_cost - (subs_discount * ordinary_cost / 100)) * 7
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–ö –æ–ø–ª–∞—Ç–µ {subs_cost} USDT:'
    #     elif language == 'en':
    #         msg = f'Price {subs_cost} USDT:'
    #
    #     invoice = Crypto.createInvoice("USDT", f'{subs_cost}', params={"description": "7ord",
    #                                                                    "expires_in": 300,
    #                                                                    })
    #     invoice_id = invoice['result']['invoice_id']
    #
    #     inline_keyboard = [
    #         [
    #             types.InlineKeyboardButton("Check Pay", callback_data=invoice_id),
    #             types.InlineKeyboardButton("Pay", url=invoice['result']['pay_url']),
    #             types.InlineKeyboardButton("Back", callback_data='Back')
    #
    #         ]
    #     ]
    #
    #     reply_markup = types.InlineKeyboardMarkup(inline_keyboard)
    #     reply_markup.row_width = width
    #
    #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
    #                           reply_markup=reply_markup, parse_mode='html')
    #     # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # # –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫ Standard
    # if call.data == '1st':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     user = Users.objects.get(user_id=call.message.chat.id)
    #     count_ref = len(Users.objects.filter(referral=user, subs_active=True))
    #     subs_discount = count_ref * discount
    #     if subs_discount > 15:
    #         subs_discount = 15
    #     subs_cost = (standard_cost - (subs_discount * standard_cost / 100)) * 1
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–ö –æ–ø–ª–∞—Ç–µ {subs_cost} USDT:'
    #     elif language == 'en':
    #         msg = f'Price {subs_cost} USDT:'
    #
    #     invoice = Crypto.createInvoice("USDT", f'{subs_cost}', params={"description": "1st",
    #                                                                    "expires_in": 300,
    #                                                                    })
    #     invoice_id = invoice['result']['invoice_id']
    #
    #     inline_keyboard = [
    #         [
    #             types.InlineKeyboardButton("Check Pay", callback_data=invoice_id),
    #             types.InlineKeyboardButton("Pay", url=invoice['result']['pay_url']),
    #             types.InlineKeyboardButton("Back", callback_data='Back')
    #
    #         ]
    #     ]
    #
    #     reply_markup = types.InlineKeyboardMarkup(inline_keyboard)
    #     reply_markup.row_width = width
    #
    #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
    #                           reply_markup=reply_markup, parse_mode='html')
    #     # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # if call.data == '3st':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     user = Users.objects.get(user_id=call.message.chat.id)
    #     count_ref = len(Users.objects.filter(referral=user, subs_active=True))
    #     subs_discount = count_ref * discount
    #     if subs_discount > 15:
    #         subs_discount = 15
    #     subs_cost = (standard_cost - (subs_discount * standard_cost / 100)) * 3
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–ö –æ–ø–ª–∞—Ç–µ {subs_cost} USDT:'
    #     elif language == 'en':
    #         msg = f'Price {subs_cost} USDT:'
    #
    #     invoice = Crypto.createInvoice("USDT", f'{subs_cost}', params={"description": "3st",
    #                                                                    "expires_in": 300,
    #                                                                    })
    #     invoice_id = invoice['result']['invoice_id']
    #
    #     inline_keyboard = [
    #         [
    #             types.InlineKeyboardButton("Check Pay", callback_data=invoice_id),
    #             types.InlineKeyboardButton("Pay", url=invoice['result']['pay_url']),
    #             types.InlineKeyboardButton("Back", callback_data='Back')
    #
    #         ]
    #     ]
    #
    #     reply_markup = types.InlineKeyboardMarkup(inline_keyboard)
    #     reply_markup.row_width = width
    #
    #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
    #                           reply_markup=reply_markup, parse_mode='html')
    #     # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # if call.data == '7st':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     user = Users.objects.get(user_id=call.message.chat.id)
    #     count_ref = len(Users.objects.filter(referral=user, subs_active=True))
    #     subs_discount = count_ref * discount
    #     if subs_discount > 15:
    #         subs_discount = 15
    #     subs_cost = (standard_cost - (subs_discount * standard_cost / 100)) * 7
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–ö –æ–ø–ª–∞—Ç–µ {subs_cost} USDT:'
    #     elif language == 'en':
    #         msg = f'Price {subs_cost} USDT:'
    #
    #     invoice = Crypto.createInvoice("USDT", f'{subs_cost}', params={"description": "7st",
    #                                                                    "expires_in": 300,
    #                                                                    })
    #     invoice_id = invoice['result']['invoice_id']
    #
    #     inline_keyboard = [
    #         [
    #             types.InlineKeyboardButton("Check Pay", callback_data=invoice_id),
    #             types.InlineKeyboardButton("Pay", url=invoice['result']['pay_url']),
    #             types.InlineKeyboardButton("Back", callback_data='Back')
    #
    #         ]
    #     ]
    #
    #     reply_markup = types.InlineKeyboardMarkup(inline_keyboard)
    #     reply_markup.row_width = width
    #
    #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
    #                           reply_markup=reply_markup, parse_mode='html')
    #     # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–µ–π–¥–µ—Ä–∞–º–∏
    # # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
    # if call.data == 'View':
    #     trader_list = []
    #     trd_list = []
    #     k = 1
    #
    #     user = Users.objects.get(user_id=call.message.chat.id)
    #     follow = UserFollowing.objects.filter(user_f=user.id)
    #     for trader in follow:
    #         # pprint(
    #         #     trader.trader_f.id
    #         # )
    #         trader_list.append(trader.trader_f.id)
    #     for tra in trader_list:
    #         trd = Traders.objects.get(id=tra)
    #         name = trd.name
    #         link = trd.link
    #
    #         mes_row = f'{k}) {name}, <a href="{link}">View Profile</a>\n\n'
    #         trd_list.append(mes_row)
    #         k += 1
    #
    #     msg = str(''.join(trd_list))
    #     # print(
    #     #     str(''.join(trd_list))
    #     # )
    #     reply_markup = types.InlineKeyboardMarkup()
    #     reply_markup.row_width = 3
    #     reply_markup.add(
    #         types.InlineKeyboardButton("üëÄView Subscriptions", callback_data='View'),
    #         types.InlineKeyboardButton("‚ûïSubscribe", callback_data='Subscribe'),
    #         types.InlineKeyboardButton("‚ûñUnsubscribe", callback_data='Unsubscribe'),
    #         types.InlineKeyboardButton("üîôBack", callback_data='Back')
    #     )
    #     if len(follow) > 0:
    #         bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
    #                               parse_mode='html', disable_web_page_preview=True)
    #         # bot.send_message(chat_id=call.message.chat.id, text=msg, parse_mode='html', disable_web_page_preview=True)
    #         bot.send_message(chat_id=call.message.chat.id, text='Menu:', reply_markup=gen_markup(), parse_mode='html')
    #     else:
    #         language = Users.objects.get(user_id=call.message.chat.id).language
    #         msg = ''
    #         if language == 'ru':
    #             msg = f'–í—ã –µ—â–µ –Ω–µ –∫–æ–ø–∏—Ä—É—é–µ—Ç–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞!'
    #         elif language == 'en':
    #             msg = f'You havent copied any traders yet!'
    #
    #         bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
    #                               text=msg, reply_markup=reply_markup, parse_mode='html')
    # # –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫
    # if call.data == 'Subscribe':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–π–¥–µ—Ä–∞:'
    #     elif language == 'en':
    #         msg = f'Send me name and link trader profile:'
    #     mesag = bot.send_message(chat_id=call.message.chat.id, text=msg)
    #
    #     bot.register_next_step_handler(mesag, add_trader)
    # # —É–¥–∞–ª—è–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    # if call.data == 'Unsubscribe':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–π–¥–µ—Ä–∞:'
    #     elif language == 'en':
    #         msg = f'Send me name and link trader profile:'
    #     mesag = bot.send_message(chat_id=call.message.chat.id, text=msg)
    #
    #     bot.register_next_step_handler(mesag, remove_trader)
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–ø–∏ –∫–ª—é—á–∏ –æ—Ç –±–∏—Ä–∂–∏
    # if call.data == 'check':
    #     language = Users.objects.get(user_id=call.message.chat.id).language
    #     msg = ''
    #     if language == 'ru':
    #         msg = f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:'
    #     elif language == 'en':
    #         msg = f'Send a screenshot of the payment:'
    #
    #     # inline_keyboard = [
    #     #     [
    #     #         types.InlineKeyboardButton("Binance", callback_data='Binance'),
    #     #         types.InlineKeyboardButton("Bybit", callback_data='Bybit'),
    #     #         types.InlineKeyboardButton("Back", callback_data='Back')
    #     #
    #     #     ]
    #     # ]
    #     #
    #     # reply_markup = types.InlineKeyboardMarkup(inline_keyboard)
    #     # reply_markup.row_width = width
    #
    #     bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
    #                           parse_mode='html')
    #     # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    if call.data == 'Exchange':
        language = Users.objects.get(user_id=call.message.chat.id).language
        msg = ''
        if language == 'ru':
            msg = f'–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:'
        elif language == 'en':
            msg = f'Choose an exchange to connect to:'

        inline_keyboard = [
            [
                types.InlineKeyboardButton("Binance", callback_data='Binance'),
                types.InlineKeyboardButton("Bybit", callback_data='Bybit'),
                types.InlineKeyboardButton("Back", callback_data='Back')

            ]
        ]

        reply_markup = types.InlineKeyboardMarkup(inline_keyboard)
        reply_markup.row_width = width

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
                              reply_markup=reply_markup, parse_mode='html')
        # bot.send_message(call.message.chat.id, msg, reply_markup=reply_markup, parse_mode='html')
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–ø–∏ –∫–ª—é—á–∏ –æ—Ç –±–∏—Ä–∂–∏ Bybit
    if call.data == 'Bybit':
        language = Users.objects.get(user_id=call.message.chat.id).language
        msg = ''
        if language == 'ru':
            msg = f'–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤–∞—à–∏ –∞–ø–∏ –∫–ª—é—á –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —á–µ—Ä–µ–∑ –∫–æ–º—É api_key, api_secret:'
        elif language == 'en':
            msg = f'Send me your api key and secret key via coma api_key, api_secret:'

        mesag = bot.send_message(chat_id=call.message.chat.id, text=msg)

        bot.register_next_step_handler(mesag, add_bybit_api)
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–ø–∏ –∫–ª—é—á–∏ –æ—Ç –±–∏—Ä–∂–∏ Binance
    if call.data == 'Binance':
        language = Users.objects.get(user_id=call.message.chat.id).language
        msg = ''
        if language == 'ru':
            msg = f'–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤–∞—à–∏ –∞–ø–∏ –∫–ª—é—á –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —á–µ—Ä–µ–∑ –∫–æ–º—É api_key, api_secret:'
        elif language == 'en':
            msg = f'Send me your api key and secret key via coma api_key, api_secret:'

        mesag = bot.send_message(chat_id=call.message.chat.id, text=msg)

        bot.register_next_step_handler(mesag, add_binance_api)
    # –ú–µ–Ω—è–µ–º –ø–ª–µ—á–µ –≤ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–µ
    if call.data == 'Leverage':
        language = Users.objects.get(user_id=call.message.chat.id).language
        msg = ''
        if language == 'ru':
            msg = f'–ü—Ä–∏—à–ª–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–µ—á–∞:'
        elif language == 'en':
            msg = f'Send the value of leverage:'

        mesag = bot.send_message(chat_id=call.message.chat.id, text=msg)

        bot.register_next_step_handler(mesag, add_leverage)
    # –ú–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏
    if call.data == 'Balance':
        language = Users.objects.get(user_id=call.message.chat.id).language
        msg = ''
        if language == 'ru':
            msg = f'–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–¥–µ–ª–∫–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:'
        elif language == 'en':
            msg = f'Send me a percentage of the balance you want to use for the transaction number from 1 to 100:'

        mesag = bot.send_message(chat_id=call.message.chat.id, text=msg)

        bot.register_next_step_handler(mesag, add_balance)
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    if call.data == 'Back':
        language = Users.objects.get(user_id=call.message.chat.id).language
        msg = ''
        if language == 'ru':
            msg = f'–ú–µ–Ω—é:'
        elif language == 'en':
            msg = f'Menu:'

        # mesag = bot.send_message(chat_id=call.message.chat.id, text=msg)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=msg,
                              reply_markup=gen_markup())
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
    else:
        try:
            invo_id = int(call.data)
            message_id = call.message.message_id
            print(message_id)
            # for in_id in Crypto.getInvoices()['result']['items']:
            #     if int(in_id['invoice_id']) == invo_id and in_id['status'] == 'paid':
            #         # –≤–∏–ø –æ–ø–ª–∞—Ç–∞
            #         if in_id['description'] == '1vip':
            #             user = Users.objects.get(user_id=call.message.chat.id)
            #             if user.subs_active:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = user.subs_date_end
            #
            #                 # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π
            #                 delta = datetime.timedelta(days=30)
            #                 future_date = today + delta
            #
            #                 language = Users.objects.get(user_id=call.message.chat.id).language
            #                 Users.objects.filter(user_id=call.message.chat.id).update(
            #                     subs_date_end=future_date,
            #                     subs_active=True,
            #                     subscription_type='VIP'
            #                 )
            #             else:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = datetime.date.today()
            #
            #                 # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π
            #                 delta = datetime.timedelta(days=30)
            #                 future_date = today + delta
            #
            #                 language = Users.objects.get(user_id=call.message.chat.id).language
            #                 Users.objects.filter(user_id=call.message.chat.id).update(
            #                     subs_date_end=future_date,
            #                     subs_active=True,
            #                     subscription_type='VIP'
            #                 )
            #
            #             msg = ''
            #             if language == 'ru':
            #                 msg = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞\n'
            #
            #             elif language == 'en':
            #                 msg = f'Congratulations, your subscription has been successfully paid.\n'
            #
            #             bot.edit_message_text(chat_id=call.message.chat.id, message_id=message_id, text=msg)
            #         if in_id['description'] == '3vip':
            #             user = Users.objects.get(user_id=call.message.chat.id)
            #             if user.subs_active:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = user.subs_date_end
            #             else:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = datetime.date.today()
            #
            #             # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π
            #             delta = datetime.timedelta(days=90)
            #             future_date = today + delta
            #
            #             language = Users.objects.get(user_id=call.message.chat.id).language
            #             Users.objects.filter(user_id=call.message.chat.id).update(
            #                 subs_date_end=future_date,
            #                 subs_active=True,
            #                 subscription_type='VIP'
            #             )
            #
            #             msg = ''
            #             if language == 'ru':
            #                 msg = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞\n'
            #
            #             elif language == 'en':
            #                 msg = f'Congratulations, your subscription has been successfully paid.\n'
            #
            #             bot.edit_message_text(chat_id=call.message.chat.id, message_id=message_id, text=msg)
            #         if in_id['description'] == '7vip':
            #             user = Users.objects.get(user_id=call.message.chat.id)
            #             if user.subs_active:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = user.subs_date_end
            #             else:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = datetime.date.today()
            #
            #             # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π
            #             delta = datetime.timedelta(days=210)
            #             future_date = today + delta
            #
            #             language = Users.objects.get(user_id=call.message.chat.id).language
            #             Users.objects.filter(user_id=call.message.chat.id).update(
            #                 subs_date_end=future_date,
            #                 subs_active=True,
            #                 subscription_type='VIP'
            #             )
            #
            #             msg = ''
            #             if language == 'ru':
            #                 msg = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞\n'
            #
            #             elif language == 'en':
            #                 msg = f'Congratulations, your subscription has been successfully paid.\n'
            #
            #             bot.edit_message_text(chat_id=call.message.chat.id, message_id=message_id, text=msg)
            #         # —Å—Ç–∞–Ω–¥–∞—Ä—Ç –æ–ø–ª–∞—Ç–∞
            #         if in_id['description'] == '1ord':
            #             user = Users.objects.get(user_id=call.message.chat.id)
            #             if user.subs_active:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = user.subs_date_end
            #             else:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = datetime.date.today()
            #
            #             # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π
            #             delta = datetime.timedelta(days=30)
            #             future_date = today + delta
            #
            #             language = Users.objects.get(user_id=call.message.chat.id).language
            #             Users.objects.filter(user_id=call.message.chat.id).update(
            #                 subs_date_end=future_date,
            #                 subs_active=True,
            #                 subscription_type='Basic'
            #             )
            #
            #             msg = ''
            #             if language == 'ru':
            #                 msg = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞\n'
            #
            #             elif language == 'en':
            #                 msg = f'Congratulations, your subscription has been successfully paid.\n'
            #
            #             bot.edit_message_text(chat_id=call.message.chat.id, message_id=message_id, text=msg)
            #         if in_id['description'] == '3ord':
            #             user = Users.objects.get(user_id=call.message.chat.id)
            #             if user.subs_active:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = user.subs_date_end
            #             else:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = datetime.date.today()
            #
            #             # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π
            #             delta = datetime.timedelta(days=90)
            #             future_date = today + delta
            #
            #             language = Users.objects.get(user_id=call.message.chat.id).language
            #             Users.objects.filter(user_id=call.message.chat.id).update(
            #                 subs_date_end=future_date,
            #                 subs_active=True,
            #                 subscription_type='Basic'
            #             )
            #
            #             msg = ''
            #             if language == 'ru':
            #                 msg = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞\n'
            #
            #             elif language == 'en':
            #                 msg = f'Congratulations, your subscription has been successfully paid.\n'
            #
            #             bot.edit_message_text(chat_id=call.message.chat.id, message_id=message_id, text=msg)
            #         if in_id['description'] == '7ord':
            #             user = Users.objects.get(user_id=call.message.chat.id)
            #             if user.subs_active:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = user.subs_date_end
            #             else:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = datetime.date.today()
            #
            #             # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π
            #             delta = datetime.timedelta(days=210)
            #             future_date = today + delta
            #
            #             language = Users.objects.get(user_id=call.message.chat.id).language
            #             Users.objects.filter(user_id=call.message.chat.id).update(
            #                 subs_date_end=future_date,
            #                 subs_active=True,
            #                 subscription_type='Basic'
            #             )
            #
            #             msg = ''
            #             if language == 'ru':
            #                 msg = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞\n'
            #
            #             elif language == 'en':
            #                 msg = f'Congratulations, your subscription has been successfully paid.\n'
            #
            #             bot.edit_message_text(chat_id=call.message.chat.id, message_id=message_id, text=msg)
            #         # Ordinary –æ–ø–ª–∞—Ç–∞
            #         if in_id['description'] == '1st':
            #             user = Users.objects.get(user_id=call.message.chat.id)
            #             if user.subs_active:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = user.subs_date_end
            #             else:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = datetime.date.today()
            #
            #             # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π
            #             delta = datetime.timedelta(days=30)
            #             future_date = today + delta
            #
            #             language = Users.objects.get(user_id=call.message.chat.id).language
            #             Users.objects.filter(user_id=call.message.chat.id).update(
            #                 subs_date_end=future_date,
            #                 subs_active=True,
            #                 subscription_type='Standard'
            #             )
            #
            #             msg = ''
            #             if language == 'ru':
            #                 msg = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞\n'
            #
            #             elif language == 'en':
            #                 msg = f'Congratulations, your subscription has been successfully paid.\n'
            #
            #             bot.edit_message_text(chat_id=call.message.chat.id, message_id=message_id, text=msg)
            #         if in_id['description'] == '3st':
            #             user = Users.objects.get(user_id=call.message.chat.id)
            #             if user.subs_active:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = user.subs_date_end
            #             else:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = datetime.date.today()
            #
            #             # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π
            #             delta = datetime.timedelta(days=90)
            #             future_date = today + delta
            #
            #             language = Users.objects.get(user_id=call.message.chat.id).language
            #             Users.objects.filter(user_id=call.message.chat.id).update(
            #                 subs_date_end=future_date,
            #                 subs_active=True,
            #                 subscription_type='Standard'
            #             )
            #
            #             msg = ''
            #             if language == 'ru':
            #                 msg = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞\n'
            #
            #             elif language == 'en':
            #                 msg = f'Congratulations, your subscription has been successfully paid.\n'
            #
            #             bot.edit_message_text(chat_id=call.message.chat.id, message_id=message_id, text=msg)
            #         if in_id['description'] == '7st':
            #             user = Users.objects.get(user_id=call.message.chat.id)
            #             if user.subs_active:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = user.subs_date_end
            #             else:
            #                 # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            #                 today = datetime.date.today()
            #
            #             # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π
            #             delta = datetime.timedelta(days=210)
            #             future_date = today + delta
            #
            #             language = Users.objects.get(user_id=call.message.chat.id).language
            #             Users.objects.filter(user_id=call.message.chat.id).update(
            #                 subs_date_end=future_date,
            #                 subs_active=True,
            #                 subscription_type='Standard'
            #             )
            #
            #             msg = ''
            #             if language == 'ru':
            #                 msg = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞\n'
            #
            #             elif language == 'en':
            #                 msg = f'Congratulations, your subscription has been successfully paid.\n'
            #
            #             bot.edit_message_text(chat_id=call.message.chat.id, message_id=message_id, text=msg)
        except ValueError as e:
            pprint(e)


@bot.message_handler(content_types=['photo'])
def handle_photo(message: Message):
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    bot.send_photo(admin_chat_id, message.photo[-1].file_id,
                   caption=f'Paying for a subscription from a user @{message.from_user.username}',
                   reply_markup=create_payment_confirmation_keyboard(message.from_user.id))


def create_payment_confirmation_keyboard(user_id: int) -> InlineKeyboardMarkup:
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —Å –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    keyboard = InlineKeyboardMarkup()
    keyboard.row_width = 2
    keyboard.add(InlineKeyboardButton('Confirm payment', callback_data=f'payment_confirmed:{user_id}'),
                 InlineKeyboardButton("not paid", callback_data=f"payment_not_confirmed:{user_id}"),
                 )
    return keyboard


@bot.callback_query_handler(lambda query: query.data.startswith('payment_not_confirmed:'))
def handle_payment_confirmation(query):
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–ª–±—ç–∫ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_id = int(query.data.split(':')[1])
    bot.send_message(admin_chat_id, f'Subscription not verified for the user id {user_id}')
    bot.send_message(user_id, f'Your subscription is not paid check again')


@bot.callback_query_handler(lambda query: query.data.startswith('payment_confirmed:'))
def handle_payment_confirmation(query):
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–ª–±—ç–∫ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_id = int(query.data.split(':')[1])
    user = Users.objects.get(user_id=user_id)
    try:
        ref = Users.objects.get(user_id=user.reffrel.id)
        ref_cashback = cashback
        bal = ref.balance
        Users.objects.filter(user_id=user.reffrel.id).update(
            balance=bal + ref_cashback
        )
    except:
        print('User dont have referral')

    if user.subs_active:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
        today = user.subs_date_end

        # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π
        delta = datetime.timedelta(days=30)
        future_date = today + delta

        Users.objects.filter(user_id=user_id).update(
            subs_date_end=future_date,
            subs_active=True,
            subscription_type='VIP'
        )
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
        today = datetime.date.today()

        # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π
        delta = datetime.timedelta(days=30)
        future_date = today + delta

        Users.objects.filter(user_id=user_id).update(
            subs_date_end=future_date,
            subs_active=True,
            subscription_type='VIP'
        )
    bot.send_message(admin_chat_id, f'Subscription verified for the user  {user_id}')
    bot.send_message(user_id, f'Your subscription has been successfully verified')


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_name = message.from_user.username
    en = ''
    ru = ''

    referral = str(message.text).replace('/start', '')

    if len(referral) > 1 and referral != user_id:
        try:
            Users.objects.get(
                user_name=user_name,
                user_id=user_id,
            )
            msg_2 = f'Hello {user_name}'
        except:
            ref = Users.objects.get(user_id=int(referral))
            user = Users(
                user_name=user_name,
                user_id=user_id,
                referral=ref
            )
            user.save()
            msg_2 = f'Hello {user_name}\n\n' \
                    # f'I see you are new here, here are instructions on how to use the bot: <a href="{en}">EN</a>, ' \
                    # f'<a href="{ru}">RU</a>'

        bot.send_message(chat_id, msg_2, reply_markup=gen_markup(), parse_mode='html', disable_web_page_preview=True)
    else:
        try:
            Users.objects.get(
                user_name=user_name,
                user_id=user_id,
            )
            msg_2 = f'Hello {user_name}'
        except:
            user = Users(
                user_name=user_name,
                user_id=user_id,
            )
            user.save()
            msg_2 = f'Hello {user_name}\n\n' \
                    # f'I see you are new here, here are instructions on how to use the bot: <a href="{en}">EN</a>, ' \
                    # f'<a href="{ru}">RU</a>'

        bot.send_message(chat_id, msg_2, reply_markup=gen_markup(), parse_mode='html', disable_web_page_preview=True)


class Command(BaseCommand):
    help = '–±–æ—Ç'

    def handle(self, *args, **options):
        while True:
            try:
                sleep(1)
                bot.infinity_polling()
            except Exception as e:
                # # Your Heroku API key
                # api_key_heroku = os.environ.get("api_key_heroku")
                # # The name of your app and dyno
                # app_name = os.environ.get("app_name")
                # heroku_conn = heroku3.from_key(api_key_heroku)
                # app = heroku_conn.app(app_name)
                # app.restart()

                exc_type, exc_obj, exc_tb = sys.exc_info()
                print(f'{e} line = {str(exc_tb.tb_lineno)}')
